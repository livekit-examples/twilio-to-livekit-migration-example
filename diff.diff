diff --git a/quickstart/src/index.js b/quickstart/src/index.js
index 376ca3a..e0d3a36 100644
--- a/quickstart/src/index.js
+++ b/quickstart/src/index.js
@@ -49,6 +49,7 @@ const deviceIds = {
  * @param [error=null] - Error from the previous Room session, if any
  */
 async function selectAndJoinRoom(error = null) {
+  console.log("select and join room");
   const formData = await selectRoom($joinRoomModal, error);
   if (!formData) {
     // User wants to change the camera and microphone.
@@ -66,13 +67,15 @@ async function selectAndJoinRoom(error = null) {
     );
 
     // Extract the AccessToken from the Response.
-    const { url: livekitUrl, token } = await response.json();
+    const { livekitUrl, token } = await response.json();
 
     // Add the specified audio device ID to ConnectOptions.
-    options.audioCaptureDefaults = { deviceId: { exact: deviceIds.audio } };
+    options.audioCaptureDefaults = { deviceId: deviceIds.audio };
 
     // Add the specified video device ID to ConnectOptions.
-    options.videoCaptureDefaults = { deviceId: { exact: deviceIds.video } };
+    options.videoCaptureDefaults = { deviceId: deviceIds.video };
+
+    console.log("joining room", { livekitUrl, token, options });
 
     // Join the Room.
     await joinRoom(livekitUrl, token, options);
@@ -89,6 +92,8 @@ async function selectAndJoinRoom(error = null) {
  * Select your camera.
  */
 async function selectCamera() {
+  console.log("select camera");
+
   if (deviceIds.video === null) {
     try {
       deviceIds.video = await selectMedia(
@@ -100,6 +105,7 @@ async function selectCamera() {
         }
       );
     } catch (error) {
+      console.log("error", error);
       showError($showErrorModal, error);
       return;
     }
@@ -111,6 +117,7 @@ async function selectCamera() {
  * Select your microphone.
  */
 async function selectMicrophone() {
+  console.log("select microphone");
   if (deviceIds.audio === null) {
     try {
       deviceIds.audio = await selectMedia(
@@ -125,9 +132,13 @@ async function selectMicrophone() {
         }
       );
     } catch (error) {
+      console.log("error", error);
+
       showError($showErrorModal, error);
       return;
     }
   }
   return selectCamera();
 }
+
+window.addEventListener("load", () => selectMicrophone());
diff --git a/quickstart/src/selectmedia.js b/quickstart/src/selectmedia.js
index 676000f..8ded270 100644
--- a/quickstart/src/selectmedia.js
+++ b/quickstart/src/selectmedia.js
@@ -2,7 +2,7 @@
 
 "use strict";
 
-const { createLocalTracks } = require("livekit-client");
+const { createLocalTracks, Room } = require("livekit-client");
 
 const localTracks = {
   audio: null,
@@ -36,8 +36,7 @@ async function applyInputDevice(kind, deviceId, render) {
  * @returns {Promise<MediaDeviceInfo[]>} the list of media devices
  */
 async function getInputDevices(kind) {
-  const devices = await navigator.mediaDevices.enumerateDevices();
-  return devices.filter((device) => device.kind === `${kind}input`);
+  return Room.getLocalDevices(kind);
 }
 
 /**
